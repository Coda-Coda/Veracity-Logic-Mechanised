(* This file contains content from VeracityLogic.v that might be useful to keep,
   but has mostly been superseded by a different approach. *)


Attempted implication proof (for V2).
(* Lemma exampleI : forall a C1 C2 Ps,

       Ps |- a ~~> C2
                               ->
            Ps |- a ~~> (Implies C1 C2)
.
Proof.
intros.
apply impl_intro.
shelve.
assumption. *)


Example of string proof tree rendering:

Here we have an example of a proof tree.
(*|
.. coq::
   :class: coq-math
|*)

Eval compute in "\begin{prooftree}\AxiomC{$ C_1 \textit{ is a veracity claim} $} \RightLabel{$ assume $}\UnaryInfC{$ l^{P} \in C_1 \vdash l^{P} \in C_1 $}\AxiomC{$ C_2 \textit{ is a veracity claim} $} \RightLabel{$ assume $}\UnaryInfC{$ s^{P} \in C_2 \vdash s^{P} \in C_2 $} \RightLabel{$ \wedge^{+} $} \BinaryInfC{$ l^{P} \in C_1, s^{P} \in C_2 \vdash (l, s)^{P} \in C_1 \wedge C_2 $}\AxiomC{$ C_3 \textit{ is a veracity claim} $} \RightLabel{$ assume $}\UnaryInfC{$ c^{P} \in C_3 \vdash c^{P} \in C_3 $} \RightLabel{$ \wedge^{+} $} \BinaryInfC{$ l^{P} \in C_1, s^{P} \in C_2, c^{P} \in C_3 \vdash ((l, s), c)^{P} \in C_1 \wedge C_2 \wedge C_3 $}\end{prooftree}"%string.

(*|
.. coq::

|*)







(* Printing of proof tree before limiting the output to one line. *)
Fixpoint printProofTree_helper (j : judgement) (p : proofTreeOf j) : string :=
match p with
| leaf c => "\AxiomC{$ " ++ show c ++ " \emph{ is a veracity claim} $}" ++ "
"
| assume e a c M => printProofTree_helper (IsAVeracityClaim c) M ++ " \RightLabel{$ assume $}
\UnaryInfC{$ " ++ show ([e \by a \in c] |- e \by a \in c) ++ " $}
"
(* | bot_elim a e1 C M => "bot_elim " ++ printProofTree ([] |- e1 \by a \in _|_) M *)
| and_intro Ps Qs a e1 e2 C1 C2 L R => 
    printProofTree_helper (Ps |- e1 \by a \in C1) L
 ++ printProofTree_helper (Qs |- e2 \by a \in C2) R 
 ++ " \RightLabel{$ \wedge^{+} $} 
\BinaryInfC{$ " ++ show ((Ps ++ Qs) |- (e1, e2) \by a \in (C1 /\' C2)) ++ " $}
"
end.

Definition printProofTree j p := "

% Proof tree generated by Coq

\begin{prooftree}" ++
printProofTree_helper j p ++ "
\end{prooftree}

".




Lemma incorrect_example_fixed_attempt : ~ forall a C1 C2 Ps,
  (Ps |- a ~> C1 -> Ps |- a ~> (C1 /\' C2)).
Proof.
unfold not.
intros.
pose proof (H (Actor 1) (Atomic (Atomic_Claim 1)) (Atomic (Atomic_Claim 2)) ([(Actor 1, (Atomic_Claim 1))])).
assert([(Actor 1, Atomic_Claim 1)] |- Actor 1 ~> Atomic (Atomic_Claim 1)).
apply assumed_belief. simpl. left. reflexivity.
apply H0 in H1.
inversion H1.
inversion e2.
simpl in H7.
destruct H7.
inversion H7.
contradiction.

Lemma exmidForBelieves : forall l a C, l |- a ~> C \/ ~ (l |- a ~> C).
Proof.
Admitted.
(* intros.
induction l.
right.
apply incorrect_example1.
destruct IHl.
left.
shelve.
right.
unfold not.
intros.
assert(l |- a ~> C -> ~ ~ (l |- a ~> C)).
intros.
unfold not.
intros.
auto.
assert( ~ ~ (l |- a ~> C) -> (l |- a ~> C)).
unfold not. intros.
exfalso.
apply H0.
intros.
induction H. *)


Lemma incorrect_example1 : forall e C, (forall a C', ~ a C') -> ~ (e ~~ C {fun c => False}).
Proof.
unfold not.
intros.
induction H0.
eapply H. apply H0.
all: assumption.
Qed.



Notation "A --- B" := (A -> B) (at level 99, right associativity).

Reserved Notation "A |- B" (at level 80).
Inductive Entail (Ps : list sentence) (s : sentence) : Prop :=
(* | bot_elim : forall a e1,

              Ps |- (a : e1 \in _|_)
              -----------------------
                     (Ps |- s) *)

| test_elim : forall a e1,

               (Ps |- (a : e1 \in _|_)) /\ True /\ False  --- (Ps |- (a : e1 \in _|_)) --- (Ps |- s)

(* | test_elim1 : forall a e1,

              { (Ps |- (a : e1 \in _|_)) | (Ps |- (a : e1 \in _|_)) | (Ps |- (a : e1 \in _|_)) }
              ---
                                (Ps |- s) *)

where "A |- B"  := (Entail A B).
































Notation "{ x | .. | y } ---  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -----------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ------------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } -------------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } --------------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ---------------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).
Notation "{ x | .. | y } ----------------------------------------------------------------------------------------------------  C" := ((and x .. (and y True) ..) -> C) (at level 99, right associativity).






Reserved Notation "A |- B" (at level 80).
Inductive Entail (Ps : list sentence) (s : sentence) : Prop :=
(* | bot_elim : forall a e1,

              Ps |- (a : e1 \in _|_)
              -----------------------
                     (Ps |- s) *)

| test_elim : forall a e1,

              {  (Ps |- (a : e1 \in _|_)) }
              ---------------------------------------------------------
                           { (Ps |- (a : e1 \in _|_)) }
              --------------------------------------------------
                                (Ps |- s)

| test_elim1 : forall a e1,

              { (Ps |- (a : e1 \in _|_)) | (Ps |- (a : e1 \in _|_)) | (Ps |- (a : e1 \in _|_)) }
              --------------------------------------------------
                                (Ps |- s)

where "A |- B"  := (Entail A B).


Notation "A -------------------------------------------------- B" := (A -> B) (at level 95, right associativity).

Notation "{ A | B } -------------------------------------------------- C" := ((A /\ B) -> C) (at level 94, right associativity).

Notation "{ A | B | C } -------------------------------------------------- D" := ((A /\ B /\ C) -> D) (at level 93, right associativity).


| bot_elim: "Entail Ps (a : e \in Bottom) (Ps  (a : e ∈ C))".

| and_intro: "Ps ⊢ (a : e1 ∈ C1) ⟹ Ps ⊢ (a : e2 ∈ C2)
          ⟹ Ps ⊢ (a : (e1 ¸ e2) ∈ (C1 ∧ C2))"

| and_elim1: "Ps ⊢ (a : (e1 ¸ e2) ∈ C1 ∧ C2) ⟹ Ps ⊢ (a : e1 ∈ C1)"
| and_elim2: "Ps ⊢ (a : (e1 ¸ e2) ∈ C1 ∧ C2) ⟹ Ps ⊢ (a : e2 ∈ C2)"

| or_intro1: "Ps ⊢ (a : e1 ∈ C1) ⟹ Ps ⊢ (a : Left e1 ∈ C1 ∨ C2)"
| or_intro2: "Ps ⊢ (a : e2 ∈ C2) ⟹ Ps ⊢ (a : Right e2 ∈ C1 ∨ C2)"

| or_elim1: "Ps ⊢ (a : Left e1 ∈ C1 ∨ C2) ⟹ Ps ⊢ (a : e1 ∈ C1)"
| or_elim2: "Ps ⊢ (a : Right e2 ∈ C1 ∨ C2) ⟹ Ps ⊢ (a : e2 ∈ C2)"

| trust: "Ps ⊢ (a2 : e ∈ C) ⟹ Ps ⊢ (a1 T a2) ⟹ Ps ⊢ (a1 : e ∈ C)"