(* Much of the following still needs to be incorporated into V3, in particular the rest of the proof rules. *)



Definition concreteProofTreeExampleWith2ConjunctsGeneric (l s : evid) (P : actor) (C1 C2 : claim) : 
proofTreeOf [l \by P \in C1; s \by P \in C2] |- (l, s) \by P \in (C1 /\' C2).
epose proof (and_intro [l \by P \in C1] [s \by P \in C2]) _ _ _ C1 C2. simpl in H.
apply H.
apply assume.
apply leaf.
apply assume.
apply leaf.
Defined.

Definition concreteProofTreeExampleWith3ConjunctsUsingExistingTree :
proofTreeOf [l \by P \in C1; s \by P \in C2; c \by P \in C3] |- ((l, s),c) \by P \in (C1 /\' C2 /\' C3).
epose proof (and_intro [l \by P \in C1; s \by P \in C2] [c \by P \in C3]) P (l, s) c (C1 /\' C2) C3. simpl in H.
apply H.
apply concreteProofTreeExampleWith2ConjunctsGeneric.
apply assume.
apply leaf.
Defined.





Eval compute in (showProofTreeOf [l \by P  \in C1; s \by P \in C2; c \by P \in C3] |- 
         (l, s, c) \by P \in (C1 /\' C2 /\' C3) concreteProofTreeExampleWith3Conjuncts).

Could help with printing trees in Coq.
(* Notation "'complex_intro' Ps Qs a e1 e2 C1 C2 L R" := (and_intro Ps Qs a e1 e2 C1 C2 L R)
(at level 2, right associativity, format
"'complex_intro' Ps Qs a e1 e2 C1 C2 '/' '[' L ']' '/' '[' R ']' "). *)



(* | bot_elim a e1 C (M : proofTreeOf ([] |- e1 \by a \in _|_))
                        :
          proofTreeOf ([] |- e1 \by a \in C) *)



(*
let H :=
  and_intro [l \by P \in C1; s \by P \in C2] [c \by P \in C3] P 
	(l, s) c (C1 /\' C2) C3 in
H
  (let H0 := and_intro [l \by P \in C1] [s \by P \in C2] P l s C1 C2 in
   H0 (E l P C1 outsideKnowledge1) (E s P C2 outsideKnowledge2))
  (E c P C3 outsideKnowledge3)


(* Goal proofTreeOf [l \by P \in C1; s \by P \in C2] |- (l, s) \by P \in (C1 /\' C2).
Proof. *)


Inductive tree (V : Type) : Type :=
| E
| T (l : tree V) (k : nat) (v : V) (r : tree V).

Inductive Proof (j : judgement) : Type :=
match j with
| Entail l e a c =>

Inductive Provable : judgement -> Prop :=
| extract_assumption : forall l j e a C,
     Provable (l |- e \by a \in C) /\ In j l
                     ->
                 Provable j
| bot_elim : forall a e1 C,
     Provable (e1 \by a \in _|_)
                     ->
     Provable (e1 \by a \in C).

Goal Provable ([e1 \by a1 \in _|_] |- e1 \by a1 \in c1).
Proof.
eapply extract_assumption.
destruct


Goal forall a e1 C, CorrectProofTree (Judgement a e1 _|_) -> CorrectProofTree (Judgement a e1 C).
intros.

Inductive Entail  :=
| and_intro Ps a e1 e2 C1 C2

         (_: Ps |- (a :' e1 \in C1)) (_: Ps |- (a :' e2 \in C2)) 
                                       :
                   Ps |- (a :' (e1, e2) \in (C1 /\' C2))
where "A |- B"  := (Entail A B).
(* | from_the_world Ps a e C

                       (_ : (FromTheWorld a e C))
                                  :
                        (Ps |- (a :' e \in C)) *)
                     

(* | from_Ps Ps a e C

                       (_ : (In (a :' e \in C)) Ps)
                                  :
                        (Ps |- (a :' e \in C)) *)
                     

(* | bot_elim Ps a e C

                      (_: (Ps |- (a :' e \in _|_)))
                                 :
                       (Ps |- (a :' e \in C))

| and_intro Ps a e1 e2 C1 C2

         (_: Ps |- (a :' e1 \in C1)) (_: Ps |- (a :' e2 \in C2)) 
                                       :
                   Ps |- (a :' (e1, e2) \in (C1 /\' C2))

| and_elim1 Ps a e1 e2 C1 C2

                (_:Ps |- (a :' (e1, e2) \in (C1 /\' C2)))
                                :
                       Ps |- (a :' e1 \in C1)

| and_elim2 Ps a e1 e2 C1 C2

                (_: Ps |- (a :' (e1, e2) \in (C1 /\' C2)))
                                :
                       Ps |- (a :' e2 \in C2)

| or_intro1 Ps a e1 C1 C2

                         (_: Ps |- (a :' e1 \in C1))
                               :
                  Ps |- (a :' Left e1 \in (C1 \/' C2))

| or_intro2 Ps a e2 C1 C2

                         (_: Ps |- (a :' e2 \in C2))
                                :
                  Ps |- (a :' Right e2 \in (C1 \/' C2))

| or_elim1 Ps a e1 C1 C2

                  (_: Ps |- (a :' Left e1 \in (C1 \/' C2)))
                                  :
                         Ps |- (a :' e1 \in C1)

| or_elim2 Ps a e2 C1 C2

                  (_: Ps |- (a :' Right e2 \in (C1 \/' C2)))
                                    :
                          Ps |- (a :' e2 \in C2)

| trust Ps a1 a2 e C

                  (_: Ps |- (a2 :' e \in C))  (_: Ps |- (Trusts a1 a2))
                                    :
                          Ps |- (a1 :' e \in C)

| impl_intro Ps Qs a e1 e2 C1 C2

                  (_: Ps ++ ((a :' e1 \in C1) :: Qs) |- (a :' e2 \in C2))
                                       :
                (Ps ++ Qs) |- (a :' Lambda e1 e2 \in (Implies C1 C2)) *)
             
where "A |- B"  := (Entail A B).

(** * Examples: Correct Statements *)

Lemma example1 : forall a e1 e2 e3 C1 C2 C3,

   [] |- (a :' e1 \in C1) /\ [] |- (a :' e2 \in C2) /\ [] |- (a :' e3 \in C3)
   -----------------------------------------------------------------------
            [] |- (a :' ((e1, e2), e3) \in ((C1 /\' C2) /\' C3))
.
Proof.
intros.
destruct H as [H1 [H2 H3]].
apply and_intro.
apply and_intro.
all: assumption.
Qed.

Lemma example2 : forall a1 a2 e1 e2 C1 C2,
  
   [] |- (a1 :' e1 \in C1) /\ [] |- (a2 :' e2 \in C2) /\ [] |- (Trusts a2 a1)
   ------------------------------------------------------------------------
                       [] |- (a2 :' (e1, e2) \in (C1 /\' C2))
.
Proof.
intros.
destruct H as [H1 [H2 H3]].
apply and_intro; [|assumption].
eapply trust.
apply H1.
apply H3.
Qed.

(* The final lemma in the Isabelle examples is not true. *)


Lemma incorrect_example1 : forall a e C, ~ ([] |- (a :' e \in C)).
Proof.
unfold not.
intros.
induction H.
shelve.
all: contradiction.
Abort.

Lemma incorrect_example1 : forall a e C,
  (forall a' e' C', ~ FromTheWorld a' e' C')
  ->
  ~ ([] |- (a :' e \in C)).
Proof.
intros.
unfold not.
intros.
induction H0.
unfold not in H.
eapply H. apply H0.
all: contradiction.
Qed.
*)